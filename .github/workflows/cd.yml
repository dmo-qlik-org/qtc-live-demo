# This is a basic workflow to help you get started with Actions

name: CD

# Controls when the workflow will run
on:
  # Triggers the workflow on push event but only for the "main" branch
  push:
    branches: [ "main" ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  get_files:
    name: run_on_pr_or_push
    runs-on: ubuntu-latest
    outputs:
      output1: ${{ steps.step2.outputs.test }}
    steps:
      - name: Checkout code
        id: step1
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Modified files
        id: step2
        run: |
          case '${{ github.event_name }}' in
            push)
              firstCommit='${{ github.event.commits[0].id }}'
              lastCommit='${{ github.event.before }}'
              ;;
            pull_request)
              firstCommit='${{ github.event.base_ref }}'
              lastCommit='${{ github.event.head_ref }}'
              ;;
          esac
          changedFiles=$(git diff --name-only --diff-filter=d "${firstCommit}~1" "${lastCommit}")
          echo "$changedFiles"
          
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v4

      # Runs a single command using the runners shell
      - name: Run a one-line script
        run: echo Hello, world!

      # Runs a set of commands using the runners shell
      - name: Run a multi-line script
        run: |
          echo Add other actions to build,
          echo test, and deploy your project.
      - name: setup python
        uses: actions/setup-python@v5.6.0
        with:
          # Version range or exact version of Python or PyPy to use, using SemVer's version range syntax. Reads from .python-version if unset.
          python-version: '3.11.13' # optional
          # File containing the Python version to use. Example: .python-version
          # python-version-file: # optional
          # Used to specify a package manager for caching in the default directory. Supported values: pip, pipenv, poetry.
          cache: 'pip' # optional
          # The target architecture (x86, x64, arm64) of the Python or PyPy interpreter.
          architecture: 'x64' # optional
          # Set this option if you want the action to check for the latest available version that satisfies the version spec.
          # check-latest: # optional
          # The token used to authenticate when fetching Python distributions from https://github.com/actions/python-versions. When running this action on github.com, the default value is sufficient. When running on GHES, you can pass a personal access token for github.com if you are experiencing rate limiting.
          # token: # optional, default is ${{ github.server_url == 'https://github.com' && github.token || '' }}
          # Used to specify the path to dependency files. Supports wildcards or a list of file names for caching multiple dependencies.
          cache-dependency-path: '**/requirements.txt' # optional
          # Set this option if you want the action to update environment variables.
          # update-environment: # optional, default is true
          # When 'true', a version range passed to 'python-version' input will match prerelease versions if no GA versions are found. Only 'x.y' version range is supported for CPython.
          # allow-prereleases: # optional
          # When 'true', use the freethreaded version of Python.
          # freethreaded: # optional
      - name: setup dependencies
        run: pip install -r requirements.txt
      - name: deploy project
        env:
          changed_files: ${{needs.job1.outputs.output1}}
          qtc_region_name: ${{ secrets.QTC_REGION_NAME }}
          qtc_tenant_name: ${{ secrets.QTC_TENANT_NAME }}
          qtc_token: ${{ secrets.QTC_TOKEN }}
        run: |
          echo "$changed_files"
          
